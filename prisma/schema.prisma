// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @unique @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  firstName     String
  lastName      String
  isActive      Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  LoginToken        LoginToken[]
  VerificationToken VerificationToken[]

  evaluator  Report[] @relation("evaluator")
  supervisor Report[] @relation("supervisor")
}

// Used to verify email
model VerificationToken {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// Used to login user through email magic link
model LoginToken {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  redirect  String   @default("/")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Role {
  id    String @unique @default(uuid())
  name  String @unique
  value Int
  User  User[]
}

// Company Name
model Company {
  id      String   @unique @default(uuid())
  name    String   @unique
  contact String? // email
  Vendor  Vendor[]
}

// Job Title
model Job {
  id     String   @unique @default(uuid())
  name   String   @unique
  Vendor Vendor[]
}

// Vendor?
model Vendor {
  id        String  @unique @default(uuid())
  firstName String
  lastName  String
  email     String?

  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String
  Report    Report[]
}

model Report {
  id                 String     @unique @default(uuid())
  vendor             Vendor     @relation(fields: [vendorId], references: [id])
  vendorId           String
  reportType         ReportType @default(PERIODIC)
  reportDate         DateTime
  objectivesReviewed String
  justification      String
  overallPerformance Int
  objectivesFuture   String
  additionalNotes    String
  evaluator          User       @relation("evaluator", fields: [evaluatorId], references: [id])
  evaluatorId        String
  supervisor         User?      @relation("supervisor", fields: [supervisorId], references: [id])
  supervisorId       String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  score   Score  @relation(fields: [scoreId], references: [id])
  scoreId String
}

model Score {
  id              String   @unique @default(uuid())
  onTimeDelivery  Int
  cost            Int
  quality         Int
  reponsiveness   Int
  reliability     Int
  accountability  Int
  leadTime        Int
  changeOrder     Int
  professionalism Int
  Report          Report[]
}

enum ReportType {
  PERIODIC
  INCREASED_SUPERVISION
}
